{"version":3,"sources":["components/Inputs/Input.js","components/Buttons/Button.js","components/Buttons/ClearButton.js","components/Buttons/RemoveButton.js","Caculator.js","serviceWorker.js","index.js"],"names":["Input","props","className","value","Button","operator","children","classOperator","onClick","handleClick","ClearButton","handleClear","RemoveButton","handleRemove","AppCaculator","addToValueInput","val","setState","input","state","hanldeMul","replace","hanldeResult","result","math","clearCaculator","removeOperator","substring","length","powerTwo","power","Math","pow","powerN","squareRootTwo","square","sqrt","pi","PI","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33459b6d.chunk.js","sourcesContent":["import React from 'react';\nimport './Input.css';\n\nconst Input = (props) => {\n  return(\n    <>\n      <div className=\"input\">\n        {props.value}\n      </div>\n    </>\n  );\n}\nexport default Input;","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => {\n  let operator = props.children;\n  let classOperator = operator === 'x' || operator === '+' || operator === '-' || operator === '/' ? \"warpper-button opeartor\" : \"warpper-button\";\n\n  return(\n    <>\n      <button \n        className={classOperator}\n        onClick={()=>props.handleClick(props.children)}\n      > \n        {props.children} \n      </button>\n    </>\n  )\n}\n\nexport default Button;","import React from 'react';\nimport './ClearButton.css';\n\nconst ClearButton = (props) => {\n  return(\n    <>\n      <button \n        className=\"clear\"\n        onClick={() => props.handleClear()}\n      >\n        Clear\n      </button>\n    </>\n  );\n}\n\nexport default ClearButton;","import React from 'react';\nimport './RemoveButton.css';\n\nconst RemoveButton = (props) => {\n  return(\n    <>\n      <button\n        className=\"remove\"\n        onClick={()=> props.handleRemove()}\n      >\n        &larr;\n      </button>\n    </>\n  )\n}\nexport default RemoveButton;","import React from \"react\";\nimport \"./Caculator.css\";\n\nimport Input from \"./components/Inputs/Input\";\nimport Button from \"./components/Buttons/Button\";\nimport ClearButton from \"./components/Buttons/ClearButton\";\nimport RemoveButton from \"./components/Buttons/RemoveButton\";\nimport * as math from \"mathjs\";\n\nclass AppCaculator extends React.Component {\n  constructor(props) {\n    //props cua class cha  React.Component\n    super(props);\n    // khai bao state hien thi phep tinh\n    this.state = { input: \"\" };\n  }\n\n  addToValueInput = val => {\n    // lay du lieu nguoi dung bam chon cac button de hien thi phep tinh\n    // set lai gia tri cho state da khai bao\n    // + phep noi chuoi trong js\n    // {input: this.state.input + val}  {input: ''}\n    //  this.state.input + val: ''\n    this.setState({ input: this.state.input + val });\n  };\n\n  hanldeMul = val => {\n    // chuyen ky tu \"x\" thanh \"*\"\n    this.setState({ input: this.state.input + val.replace(\"x\", \"*\") });\n  };\n\n  hanldeResult = () => {\n    let result = math.eval(this.state.input);\n    this.setState({ input: result });\n  };\n\n  clearCaculator = () => {\n    this.setState({ input: \"\" });\n  };\n\n  removeOperator = () => {\n    let operator = this.state.input;\n    // xoa ky tu cuoi cung trong \"operator\"\n    operator = operator.substring(0, operator.length - 1);\n    this.setState({ input: operator });\n  };\n  powerTwo = () => {\n    let power = this.state.input;\n    power = Math.pow(power, 2);\n    this.setState({ input: power });\n  };\n  powerN = val => {\n    this.setState({ input: this.state.input + val.replace(\"x^n\", \"^\") });\n  };\n  squareRootTwo = () => {\n    let square = this.state.input;\n    square = Math.sqrt(square);\n    this.setState({input: square});\n  }\n  pi = () => {\n    let pi = this.state.input;\n    pi = Math.PI;\n    this.setState({input: pi});\n  }\n  render() {\n    // hien thi view ra ngoai trinh duyet\n    // tat ca cac ma code hien thi ra view goi la jsx\n    return (\n      <>\n        <div className=\"App-wrapper\">\n          <div className=\"App-main\">\n            <div className=\"row\">\n              <Input value={this.state.input} />\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToValueInput}>7</Button>\n              <Button handleClick={this.addToValueInput}>8</Button>\n              <Button handleClick={this.addToValueInput}>9</Button>\n              <Button handleClick={this.powerTwo}>x^2</Button>\n              <Button handleClick={this.hanldeMul}>x</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToValueInput}>4</Button>\n              <Button handleClick={this.addToValueInput}>5</Button>\n              <Button handleClick={this.addToValueInput}>6</Button>\n              <Button handleClick={this.powerN}>x^n</Button>\n              <Button handleClick={this.addToValueInput}>-</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToValueInput}>1</Button>\n              <Button handleClick={this.addToValueInput}>2</Button>\n              <Button handleClick={this.addToValueInput}>3</Button>\n              <Button handleClick={this.squareRootTwo}>&radic;</Button>\n              <Button handleClick={this.addToValueInput}>+</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToValueInput}>0</Button>\n              <Button handleClick={this.addToValueInput}>.</Button>\n              <Button handleClick={this.pi}>&Pi;</Button>\n              <Button handleClick={() => this.hanldeResult()}>=</Button>\n              <Button handleClick={this.addToValueInput}>/</Button>\n            </div>\n            <div className=\"row\">\n              <ClearButton handleClear={() => this.clearCaculator()} />\n              <RemoveButton handleRemove={() => this.removeOperator()} />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n// de co the import tu cac noi khac\nexport default AppCaculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import AppCaculator from './Caculator';\nimport Caculator from './Caculator';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Caculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}